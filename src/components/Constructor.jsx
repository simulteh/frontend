// components/Constructor.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import './Constructor.css';

const Constructor = () => {
  const [inputValue, setInputValue] = useState('');
  const [outputText, setOutputText] = useState('');
  const [loading, setLoading] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [checkingAuth, setCheckingAuth] = useState(true);
  const navigate = useNavigate();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const token = localStorage.getItem('token');
    if (!token) {
      sessionStorage.setItem('redirectAfterLogin', '/construct');
      navigate('/auth');
      return;
    }
    setIsAuthenticated(true);
    setCheckingAuth(false);
  }, [navigate]);

  const handleSubmit = async () => {
    if (!isAuthenticated) {
      navigate('/auth');
      return;
    }

    if (!inputValue.trim()) {
      setOutputText('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã!');
      return;
    }

    setLoading(true);
    setOutputText('');

    try {
      const response = await fetch('http://127.0.0.1:5000/predict', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ item: inputValue })
      });
      
      const data = await response.json();
      const books = data.books;
      
      let resultText = '';
      books.forEach((book, index) => {
        resultText += `${index + 1}. –ê–≤—Ç–æ—Ä: ${book.–ê–≤—Ç–æ—Ä}\n   –ù–∞–∑–≤–∞–Ω–∏–µ: ${book.–ù–∞–∑–≤–∞–Ω–∏–µ}\n\n`;
      });
      
      setOutputText(resultText);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
      setOutputText('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    } finally {
      setLoading(false);
    }
  };

  if (checkingAuth) {
    return (
      <div className="constructor-container">
        <div className="loading-auth">
          <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...</p>
        </div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return (
      <div className="constructor-container">
        <div className="auth-required">
          <h2>üîê –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω</h2>
          <p>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è</p>
          <button onClick={() => navigate('/auth')} className="btn auth-btn">
            –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="constructor-container">
      <div className="constructor-header">
        <h2>–£–º–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä</h2>
        <p>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã</p>
        <div className="user-info">
          ‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫: {localStorage.getItem('email') || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
        </div>
      </div>

      <div className="constructor-input-section">
        <div className="input-group">
          <input
            type="text"
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSubmit()}
            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"
            className="constructor-input"
            disabled={loading}
          />
          <button 
            onClick={handleSubmit} 
            className="constructor-btn"
            disabled={loading}
          >
            {loading ? '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...' : 'üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
          </button>
        </div>
      </div>

      <div className="constructor-output-section">
        <h3>üìö –°–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã</h3>
        <textarea 
          value={outputText} 
          readOnly 
          className="constructor-output"
          placeholder="–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã..."
        />
      </div>
    </div>
  );
};

export default Constructor;