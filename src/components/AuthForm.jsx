import React, { useState } from 'react';
import axios from 'axios';
import './AuthForm.css';

//const API_URL = "http://localhost:8080"; // URL –±—ç–∫–µ–Ω–¥–∞

const AuthForm = () => {
  const [isLogin, setIsLogin] = useState(true);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [middleName, setMiddleName] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    setLoading(true);

    try {
      if (isLogin) {
        // üîë –í—Ö–æ–¥
        const res = await axios.post(`/auth/sign-in`, {
          email,
          password,
        });
        if (res.data.token) {
          localStorage.setItem('token', res.data.token);
          localStorage.setItem('email', email); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          setSuccess('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!');
        }
      } else {
        // üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        const res = await axios.post(`/auth/sign-up`, {
          firstName,
          lastName,
          middleName,
          email,
          password,
        });

        if (res.data.message) {
          setSuccess(res.data.message);
        } else {
          setSuccess('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
        }
      }
    } catch (err) {
      console.error(err);
      setError(err.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="auth-container">
      <h2>{isLogin ? '–í—Ö–æ–¥' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}</h2>
      <form onSubmit={handleSubmit}>
        {!isLogin && (
          <>
            <div className="form-group">
              <label htmlFor="lastName">–§–∞–º–∏–ª–∏—è</label>
              <input
                type="text"
                id="lastName"
                value={lastName}
                onChange={(e) => setLastName(e.target.value)}
                required
              />
            </div>

            <div className="form-group">
              <label htmlFor="firstName">–ò–º—è</label>
              <input
                type="text"
                id="firstName"
                value={firstName}
                onChange={(e) => setFirstName(e.target.value)}
                required
              />
            </div>

            <div className="form-group">
              <label htmlFor="middleName">–û—Ç—á–µ—Å—Ç–≤–æ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)</label>
              <input
                type="text"
                id="middleName"
                value={middleName}
                onChange={(e) => setMiddleName(e.target.value)}
              />
            </div>
          </>
        )}

        <div className="form-group">
          <label htmlFor="email">Email</label>
          <input
            type="email"
            id="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>

        <div className="form-group">
          <label htmlFor="password">–ü–∞—Ä–æ–ª—å</label>
          <input
            type="password"
            id="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>

        {error && <p className="error">{error}</p>}
        {success && <p className="success">{success}</p>}

        <button type="submit" className="submit-btn" disabled={loading}>
          {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : isLogin ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
        </button>
      </form>

      <div className="auth-links">
        {isLogin ? (
          <>
            <p>
              <a href="#forgot-password">–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?</a>
            </p>
            <p>
              –ï—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?{' '}
              <button type="button" onClick={() => setIsLogin(false)}>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å</button>
            </p>
          </>
        ) : (
          <p>
            –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{' '}
            <button type="button" onClick={() => setIsLogin(true)}>–í–æ–π–¥–∏—Ç–µ</button>
          </p>
        )}
      </div>
    </div>
  );
};

export default AuthForm;
