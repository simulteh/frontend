import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import './AuthForm.css';

const API_URL = "http://212.67.12.82:8080"; // URL –±—ç–∫–µ–Ω–¥–∞

const AuthForm = () => {
  const [isLogin, setIsLogin] = useState(true);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [middleName, setMiddleName] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [showPassword, setShowPassword] = useState(false);

  const navigate = useNavigate(); // ‚Üê –î–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if (!isLogin && password !== confirmPassword) {
      setError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      return;
    }

    setLoading(true);

    try {
      if (isLogin) {
        // üîë –í—Ö–æ–¥
        const res = await axios.post(`${API_URL}/auth/sign-in`, {
          email,
          password,
        });
        console.log(res.data)
        if (res.data) {
          localStorage.setItem('token', res.data);
          localStorage.setItem('email', email);
          setSuccess('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!');
          navigate('/profile'); // ‚Üê –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
        }
      } else {
        // üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        const res = await axios.post(`${API_URL}/auth/sign-up`, {
          firstName,
          lastName,
          middleName,
          email,
          password,
        });
        console.log(res.data);

        if (res.data) {
          setSuccess(res.data); // backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
        } else {
          setSuccess('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
        }
      }
    } catch (err) {
      console.error(err);

      // üëá –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –±—ç–∫–∞
      if (!isLogin && err.response?.status === 400) {
        setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else if (err.response?.status === 500) {
        setError('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } else {
        setError(err.response?.data || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="auth-container">
      <h2>{isLogin ? '–í—Ö–æ–¥' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}</h2>
      <form onSubmit={handleSubmit}>
        {!isLogin && (
          <>
            <div className="form-group">
              <label htmlFor="lastName">–§–∞–º–∏–ª–∏—è</label>
              <input
                type="text"
                id="lastName"
                value={lastName}
                onChange={(e) => setLastName(e.target.value)}
                required
              />
            </div>

            <div className="form-group">
              <label htmlFor="firstName">–ò–º—è</label>
              <input
                type="text"
                id="firstName"
                value={firstName}
                onChange={(e) => setFirstName(e.target.value)}
                required
              />
            </div>

            <div className="form-group">
              <label htmlFor="middleName">–û—Ç—á–µ—Å—Ç–≤–æ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)</label>
              <input
                type="text"
                id="middleName"
                value={middleName}
                onChange={(e) => setMiddleName(e.target.value)}
              />
            </div>
          </>
        )}

        <div className="form-group">
          <label htmlFor="email">Email</label>
          <input
            type="email"
            id="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>

        <div className="form-group password-group">
          <label htmlFor="password">–ü–∞—Ä–æ–ª—å</label>
          <div className="password-wrapper">
            <input
              type={showPassword ? 'text' : 'password'}
              id="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
            <button
              type="button"
              className="toggle-password"
              onClick={() => setShowPassword(!showPassword)}
            >
              {showPassword ? 'üôà' : 'üëÅ'}
            </button>
          </div>
        </div>

        {!isLogin && (
          <div className="form-group password-group">
            <label htmlFor="confirmPassword">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</label>
            <div className="password-wrapper">
              <input
                type={showPassword ? 'text' : 'password'}
                id="confirmPassword"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                required
              />
              <button
                type="button"
                className="toggle-password"
                onClick={() => setShowPassword(!showPassword)}
              >
                {showPassword ? 'üôà' : 'üëÅ'}
              </button>
            </div>
          </div>
        )}

        {error && <p className="error">{error}</p>}
        {success && <p className="success">{success}</p>}

        <button type="submit" className="submit-btn" disabled={loading}>
          {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : isLogin ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
        </button>
      </form>

      <div className="auth-links">
        {isLogin ? (
          <>
            <p>
              <a href="#forgot-password">–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?</a>
            </p>
            <p>
              –ï—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?{' '}
              <button type="button" onClick={() => setIsLogin(false)}>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å</button>
            </p>
          </>
        ) : (
          <p>
            –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{' '}
            <button type="button" onClick={() => setIsLogin(true)}>–í–æ–π–¥–∏—Ç–µ</button>
          </p>
        )}
      </div>
    </div>
  );
};

export default AuthForm;
